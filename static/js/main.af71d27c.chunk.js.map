{"version":3,"sources":["utils/shuffle.js","components/Board.js","components/App.js","serviceWorker.js","index.js"],"names":["invCount","arr","inv","i","length","j","shuffle","copy","n","Math","floor","random","push","calculateWinner","a","Tile","props","index","handleClick","value","style","cursor","onClick","className","Board","shuffleBoard","interval","setInterval","increment","empty_i","empty_j","grid","ret","shuffleGrid","setState","game_started","state","time","reset","window","clearInterval","handleChange","temp","correct","this","display","justifyItems","location","reload","map","list","key","item","React","Component","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.af71d27c.chunk.js","sourcesContent":["export function shuffleGrid() {\r\n    let arr = [];\r\n    let ret = [[], [], []];\r\n    do {\r\n        arr = shuffle();\r\n    } while (invCount(arr) % 2 !== 0);\r\n    for (let i = 0; i < arr.length; ++i) {\r\n        ret[Math.floor(i / 3)].push(arr[i]);\r\n    }\r\n    return ret;\r\n}\r\nexport function invCount(arr) {\r\n    //heck it dosen't matter in n=9 still\r\n    //can be done using merge sort O(nlgn)\r\n    //current O(n^2)\r\n    let inv = 0;\r\n    for (let i = 0; i < arr.length - 1; ++i) {\r\n        for (let j = i + 1; j < arr.length; ++j) {\r\n            if (arr[i] > arr[j] && arr[i] !== 0 && arr[j] !== 0)\r\n                inv++;\r\n        }\r\n    }\r\n    return inv;\r\n}\r\nexport function shuffle() {\r\n    //redo with fisher yates algo\r\n    let arr = [0, 1, 2, 3, 4, 5, 6, 7, 8];\r\n    let copy = [], n = arr.length, i;\r\n\r\n    while (n) {\r\n        //pick a random element \r\n        i = Math.floor(Math.random() * arr.length);\r\n\r\n        if (i in arr) {\r\n            copy.push(arr[i]);\r\n            delete arr[i];\r\n            n--;\r\n        }\r\n    }\r\n    return copy;\r\n}\r\nexport function calculateWinner(arr) {\r\n    let a = [\r\n        [1, 2, 3],\r\n        [4, 5, 6],\r\n        [7, 8, 0]\r\n    ];\r\n    for (let i = 0; i < 3; i++)\r\n        for (let j = 0; j < 3; j++)\r\n            if (arr[i][j] !== a[i][j])\r\n                return false;\r\n    return true;\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport { shuffleGrid, calculateWinner } from \"../utils/shuffle\";\r\n\r\nfunction Tile(props) {\r\n    let { index, handleClick } = props;\r\n    if (props.value !== 0)\r\n        return (\r\n            <div\r\n                style={{\r\n                    cursor: \"pointer\",\r\n                }}\r\n                onClick={() => {\r\n                    handleClick(index);\r\n                }}\r\n                className=\"tile\"\r\n            >\r\n                {props.value}\r\n            </div>\r\n        );\r\n    else return <span className=\"empty\">.</span>;\r\n}\r\n\r\nexport class Board extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            empty_i: 2,\r\n            empty_j: 2,\r\n            grid: [\r\n                [1, 2, 3],\r\n                [4, 5, 6],\r\n                [7, 8, 0],\r\n            ],\r\n            time: 0,\r\n            game_started: false,\r\n        };\r\n    }\r\n    shuffleBoard = () => {\r\n        this.interval = setInterval(this.increment, 1000);\r\n        let grid = shuffleGrid();\r\n        let i, j;\r\n        let empty_i, empty_j;\r\n        for (i = 0; i <= 2; i++)\r\n            for (j = 0; j <= 2; j++)\r\n                if (grid[i][j] === 0) {\r\n                    empty_i = i;\r\n                    empty_j = j;\r\n                    j = 2;\r\n                    i = 2;\r\n                }\r\n        this.setState({ grid, empty_i, empty_j, game_started: true });\r\n    }\r\n    increment = () => {\r\n        this.setState((state) => ({ time: state.time + 1 }));\r\n    };\r\n\r\n    reset = () => {\r\n        let grid = [\r\n            [1, 2, 3],\r\n            [4, 5, 6],\r\n            [7, 8, 0],\r\n        ];\r\n        window.clearInterval(this.interval);\r\n        this.setState({ grid, empty_i: 2, empty_j: 2, time: 0, game_started: false });\r\n    };\r\n    handleChange = (index) => {\r\n        let grid = this.state.grid;\r\n        let empty_i = this.state.empty_i;\r\n        let empty_j = this.state.empty_j;\r\n        let { i, j } = index;\r\n\r\n        //swap with empty block\r\n        let temp = grid[empty_i][empty_j];\r\n        grid[empty_i][empty_j] = grid[i][j];\r\n        grid[i][j] = temp;\r\n        this.setState({ grid: grid, empty_i: i, empty_j: j });\r\n        let correct = calculateWinner(this.state.grid);\r\n        if (correct)\r\n            window.clearInterval(this.interval);\r\n    };\r\n\r\n    handleClick = (index) => {\r\n        let { i, j } = index;\r\n        let { empty_i, empty_j } = this.state;\r\n        if ((empty_i === i + 1 && empty_j === j) || (empty_i === i - 1 && empty_j === j)\r\n            || (empty_j === j - 1 && empty_i === i) || (empty_j === j + 1 && empty_i === i))\r\n            this.handleChange(index);\r\n    };\r\n    render() {\r\n        let correct = calculateWinner(this.state.grid);\r\n        let won = correct && this.state.game_started;\r\n        if (!won) {\r\n            return (\r\n                <div>\r\n                    <div className=\"card\">\r\n                        <div className=\"board\">\r\n                            {\r\n                                this.state.grid.map((list, i) => {\r\n                                    return (\r\n                                        <div key={i}>\r\n                                            {list.map((item, j) => {\r\n                                                let index = { i, j, };\r\n                                                return <Tile value={this.state.grid[i][j]} key={j} handleClick={this.handleClick} index={index} />;\r\n                                            })}\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                        </div>\r\n                        <div className=\"clock\">\r\n                            <h3>\r\n                                {Math.floor(this.state.time / 60)} : {this.state.time % 60}\r\n                            </h3>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"buttons\">\r\n                        <button onClick={correct ? this.shuffleBoard : this.reset}>\r\n                            {correct ? \"START\" : \"RESET\"}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else {\r\n            window.clearInterval(this.interval);\r\n            return (\r\n                <div style={{\r\n                    display: \"grid\",\r\n                    justifyItems: \"center\",\r\n                }}>\r\n                    <h1>\r\n                        CONGRATULATIONS <br /> YOU WON IN {Math.floor(this.state.time / 60)}:\r\n                    {this.state.time % 60}{\" \"}\r\n                    </h1>\r\n                    <button\r\n                        onClick={() => {\r\n                            window.location.reload();\r\n                        }}\r\n                    >\r\n                        PLAY AGAIN\r\n                  </button>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\nimport '../styles/board.css';\nimport { Board } from './Board';\n\nfunction App() {\n  return (\n    <div>\n      <h1>8-TILES</h1>\n      <Board />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}